// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterworker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_masterworker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_masterworker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_masterworker_2eproto;
namespace masterworker {
class MapReply;
class MapReplyDefaultTypeInternal;
extern MapReplyDefaultTypeInternal _MapReply_default_instance_;
class ReduceFile;
class ReduceFileDefaultTypeInternal;
extern ReduceFileDefaultTypeInternal _ReduceFile_default_instance_;
class ReduceReply;
class ReduceReplyDefaultTypeInternal;
extern ReduceReplyDefaultTypeInternal _ReduceReply_default_instance_;
class Shard;
class ShardDefaultTypeInternal;
extern ShardDefaultTypeInternal _Shard_default_instance_;
class ShardFileInfo;
class ShardFileInfoDefaultTypeInternal;
extern ShardFileInfoDefaultTypeInternal _ShardFileInfo_default_instance_;
}  // namespace masterworker
PROTOBUF_NAMESPACE_OPEN
template<> ::masterworker::MapReply* Arena::CreateMaybeMessage<::masterworker::MapReply>(Arena*);
template<> ::masterworker::ReduceFile* Arena::CreateMaybeMessage<::masterworker::ReduceFile>(Arena*);
template<> ::masterworker::ReduceReply* Arena::CreateMaybeMessage<::masterworker::ReduceReply>(Arena*);
template<> ::masterworker::Shard* Arena::CreateMaybeMessage<::masterworker::Shard>(Arena*);
template<> ::masterworker::ShardFileInfo* Arena::CreateMaybeMessage<::masterworker::ShardFileInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace masterworker {

// ===================================================================

class Shard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.Shard) */ {
 public:
  inline Shard() : Shard(nullptr) {}
  virtual ~Shard();

  Shard(const Shard& from);
  Shard(Shard&& from) noexcept
    : Shard() {
    *this = ::std::move(from);
  }

  inline Shard& operator=(const Shard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shard& operator=(Shard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shard& default_instance();

  static inline const Shard* internal_default_instance() {
    return reinterpret_cast<const Shard*>(
               &_Shard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Shard& a, Shard& b) {
    a.Swap(&b);
  }
  inline void Swap(Shard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Shard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shard* New() const final {
    return CreateMaybeMessage<Shard>(nullptr);
  }

  Shard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shard& from);
  void MergeFrom(const Shard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.Shard";
  }
  protected:
  explicit Shard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 1,
    kNOutputFilesFieldNumber = 2,
  };
  // repeated .masterworker.ShardFileInfo files = 1;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::masterworker::ShardFileInfo* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardFileInfo >*
      mutable_files();
  private:
  const ::masterworker::ShardFileInfo& _internal_files(int index) const;
  ::masterworker::ShardFileInfo* _internal_add_files();
  public:
  const ::masterworker::ShardFileInfo& files(int index) const;
  ::masterworker::ShardFileInfo* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardFileInfo >&
      files() const;

  // int32 nOutputFiles = 2;
  void clear_noutputfiles();
  ::PROTOBUF_NAMESPACE_ID::int32 noutputfiles() const;
  void set_noutputfiles(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_noutputfiles() const;
  void _internal_set_noutputfiles(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.Shard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardFileInfo > files_;
  ::PROTOBUF_NAMESPACE_ID::int32 noutputfiles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class ShardFileInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.ShardFileInfo) */ {
 public:
  inline ShardFileInfo() : ShardFileInfo(nullptr) {}
  virtual ~ShardFileInfo();

  ShardFileInfo(const ShardFileInfo& from);
  ShardFileInfo(ShardFileInfo&& from) noexcept
    : ShardFileInfo() {
    *this = ::std::move(from);
  }

  inline ShardFileInfo& operator=(const ShardFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardFileInfo& operator=(ShardFileInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardFileInfo& default_instance();

  static inline const ShardFileInfo* internal_default_instance() {
    return reinterpret_cast<const ShardFileInfo*>(
               &_ShardFileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ShardFileInfo& a, ShardFileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardFileInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardFileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardFileInfo* New() const final {
    return CreateMaybeMessage<ShardFileInfo>(nullptr);
  }

  ShardFileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardFileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardFileInfo& from);
  void MergeFrom(const ShardFileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardFileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.ShardFileInfo";
  }
  protected:
  explicit ShardFileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kStartFieldNumber = 2,
    kFinishFieldNumber = 3,
  };
  // string fileName = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // int32 start = 2;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 finish = 3;
  void clear_finish();
  ::PROTOBUF_NAMESPACE_ID::int32 finish() const;
  void set_finish(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_finish() const;
  void _internal_set_finish(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.ShardFileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 finish_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class MapReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.MapReply) */ {
 public:
  inline MapReply() : MapReply(nullptr) {}
  virtual ~MapReply();

  MapReply(const MapReply& from);
  MapReply(MapReply&& from) noexcept
    : MapReply() {
    *this = ::std::move(from);
  }

  inline MapReply& operator=(const MapReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapReply& operator=(MapReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapReply& default_instance();

  static inline const MapReply* internal_default_instance() {
    return reinterpret_cast<const MapReply*>(
               &_MapReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MapReply& a, MapReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MapReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapReply* New() const final {
    return CreateMaybeMessage<MapReply>(nullptr);
  }

  MapReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapReply& from);
  void MergeFrom(const MapReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.MapReply";
  }
  protected:
  explicit MapReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFileFieldNumber = 1,
  };
  // string mapFile = 1;
  void clear_mapfile();
  const std::string& mapfile() const;
  void set_mapfile(const std::string& value);
  void set_mapfile(std::string&& value);
  void set_mapfile(const char* value);
  void set_mapfile(const char* value, size_t size);
  std::string* mutable_mapfile();
  std::string* release_mapfile();
  void set_allocated_mapfile(std::string* mapfile);
  private:
  const std::string& _internal_mapfile() const;
  void _internal_set_mapfile(const std::string& value);
  std::string* _internal_mutable_mapfile();
  public:

  // @@protoc_insertion_point(class_scope:masterworker.MapReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapfile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class ReduceFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.ReduceFile) */ {
 public:
  inline ReduceFile() : ReduceFile(nullptr) {}
  virtual ~ReduceFile();

  ReduceFile(const ReduceFile& from);
  ReduceFile(ReduceFile&& from) noexcept
    : ReduceFile() {
    *this = ::std::move(from);
  }

  inline ReduceFile& operator=(const ReduceFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReduceFile& operator=(ReduceFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReduceFile& default_instance();

  static inline const ReduceFile* internal_default_instance() {
    return reinterpret_cast<const ReduceFile*>(
               &_ReduceFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReduceFile& a, ReduceFile& b) {
    a.Swap(&b);
  }
  inline void Swap(ReduceFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReduceFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReduceFile* New() const final {
    return CreateMaybeMessage<ReduceFile>(nullptr);
  }

  ReduceFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReduceFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReduceFile& from);
  void MergeFrom(const ReduceFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReduceFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.ReduceFile";
  }
  protected:
  explicit ReduceFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
  };
  // string fileName = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // @@protoc_insertion_point(class_scope:masterworker.ReduceFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class ReduceReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.ReduceReply) */ {
 public:
  inline ReduceReply() : ReduceReply(nullptr) {}
  virtual ~ReduceReply();

  ReduceReply(const ReduceReply& from);
  ReduceReply(ReduceReply&& from) noexcept
    : ReduceReply() {
    *this = ::std::move(from);
  }

  inline ReduceReply& operator=(const ReduceReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReduceReply& operator=(ReduceReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReduceReply& default_instance();

  static inline const ReduceReply* internal_default_instance() {
    return reinterpret_cast<const ReduceReply*>(
               &_ReduceReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReduceReply& a, ReduceReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ReduceReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReduceReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReduceReply* New() const final {
    return CreateMaybeMessage<ReduceReply>(nullptr);
  }

  ReduceReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReduceReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReduceReply& from);
  void MergeFrom(const ReduceReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReduceReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.ReduceReply";
  }
  protected:
  explicit ReduceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:masterworker.ReduceReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Shard

// repeated .masterworker.ShardFileInfo files = 1;
inline int Shard::_internal_files_size() const {
  return files_.size();
}
inline int Shard::files_size() const {
  return _internal_files_size();
}
inline void Shard::clear_files() {
  files_.Clear();
}
inline ::masterworker::ShardFileInfo* Shard::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:masterworker.Shard.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardFileInfo >*
Shard::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:masterworker.Shard.files)
  return &files_;
}
inline const ::masterworker::ShardFileInfo& Shard::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::masterworker::ShardFileInfo& Shard::files(int index) const {
  // @@protoc_insertion_point(field_get:masterworker.Shard.files)
  return _internal_files(index);
}
inline ::masterworker::ShardFileInfo* Shard::_internal_add_files() {
  return files_.Add();
}
inline ::masterworker::ShardFileInfo* Shard::add_files() {
  // @@protoc_insertion_point(field_add:masterworker.Shard.files)
  return _internal_add_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardFileInfo >&
Shard::files() const {
  // @@protoc_insertion_point(field_list:masterworker.Shard.files)
  return files_;
}

// int32 nOutputFiles = 2;
inline void Shard::clear_noutputfiles() {
  noutputfiles_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Shard::_internal_noutputfiles() const {
  return noutputfiles_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Shard::noutputfiles() const {
  // @@protoc_insertion_point(field_get:masterworker.Shard.nOutputFiles)
  return _internal_noutputfiles();
}
inline void Shard::_internal_set_noutputfiles(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  noutputfiles_ = value;
}
inline void Shard::set_noutputfiles(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_noutputfiles(value);
  // @@protoc_insertion_point(field_set:masterworker.Shard.nOutputFiles)
}

// -------------------------------------------------------------------

// ShardFileInfo

// string fileName = 1;
inline void ShardFileInfo::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& ShardFileInfo::filename() const {
  // @@protoc_insertion_point(field_get:masterworker.ShardFileInfo.fileName)
  return _internal_filename();
}
inline void ShardFileInfo::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:masterworker.ShardFileInfo.fileName)
}
inline std::string* ShardFileInfo::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:masterworker.ShardFileInfo.fileName)
  return _internal_mutable_filename();
}
inline const std::string& ShardFileInfo::_internal_filename() const {
  return filename_.Get();
}
inline void ShardFileInfo::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ShardFileInfo::set_filename(std::string&& value) {
  
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.ShardFileInfo.fileName)
}
inline void ShardFileInfo::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.ShardFileInfo.fileName)
}
inline void ShardFileInfo::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.ShardFileInfo.fileName)
}
inline std::string* ShardFileInfo::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ShardFileInfo::release_filename() {
  // @@protoc_insertion_point(field_release:masterworker.ShardFileInfo.fileName)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardFileInfo::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.ShardFileInfo.fileName)
}

// int32 start = 2;
inline void ShardFileInfo::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardFileInfo::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardFileInfo::start() const {
  // @@protoc_insertion_point(field_get:masterworker.ShardFileInfo.start)
  return _internal_start();
}
inline void ShardFileInfo::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
}
inline void ShardFileInfo::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:masterworker.ShardFileInfo.start)
}

// int32 finish = 3;
inline void ShardFileInfo::clear_finish() {
  finish_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardFileInfo::_internal_finish() const {
  return finish_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardFileInfo::finish() const {
  // @@protoc_insertion_point(field_get:masterworker.ShardFileInfo.finish)
  return _internal_finish();
}
inline void ShardFileInfo::_internal_set_finish(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  finish_ = value;
}
inline void ShardFileInfo::set_finish(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_finish(value);
  // @@protoc_insertion_point(field_set:masterworker.ShardFileInfo.finish)
}

// -------------------------------------------------------------------

// MapReply

// string mapFile = 1;
inline void MapReply::clear_mapfile() {
  mapfile_.ClearToEmpty();
}
inline const std::string& MapReply::mapfile() const {
  // @@protoc_insertion_point(field_get:masterworker.MapReply.mapFile)
  return _internal_mapfile();
}
inline void MapReply::set_mapfile(const std::string& value) {
  _internal_set_mapfile(value);
  // @@protoc_insertion_point(field_set:masterworker.MapReply.mapFile)
}
inline std::string* MapReply::mutable_mapfile() {
  // @@protoc_insertion_point(field_mutable:masterworker.MapReply.mapFile)
  return _internal_mutable_mapfile();
}
inline const std::string& MapReply::_internal_mapfile() const {
  return mapfile_.Get();
}
inline void MapReply::_internal_set_mapfile(const std::string& value) {
  
  mapfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MapReply::set_mapfile(std::string&& value) {
  
  mapfile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.MapReply.mapFile)
}
inline void MapReply::set_mapfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mapfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.MapReply.mapFile)
}
inline void MapReply::set_mapfile(const char* value,
    size_t size) {
  
  mapfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.MapReply.mapFile)
}
inline std::string* MapReply::_internal_mutable_mapfile() {
  
  return mapfile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MapReply::release_mapfile() {
  // @@protoc_insertion_point(field_release:masterworker.MapReply.mapFile)
  return mapfile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MapReply::set_allocated_mapfile(std::string* mapfile) {
  if (mapfile != nullptr) {
    
  } else {
    
  }
  mapfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.MapReply.mapFile)
}

// -------------------------------------------------------------------

// ReduceFile

// string fileName = 1;
inline void ReduceFile::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& ReduceFile::filename() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceFile.fileName)
  return _internal_filename();
}
inline void ReduceFile::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:masterworker.ReduceFile.fileName)
}
inline std::string* ReduceFile::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:masterworker.ReduceFile.fileName)
  return _internal_mutable_filename();
}
inline const std::string& ReduceFile::_internal_filename() const {
  return filename_.Get();
}
inline void ReduceFile::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReduceFile::set_filename(std::string&& value) {
  
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.ReduceFile.fileName)
}
inline void ReduceFile::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.ReduceFile.fileName)
}
inline void ReduceFile::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.ReduceFile.fileName)
}
inline std::string* ReduceFile::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReduceFile::release_filename() {
  // @@protoc_insertion_point(field_release:masterworker.ReduceFile.fileName)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReduceFile::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.ReduceFile.fileName)
}

// -------------------------------------------------------------------

// ReduceReply

// string message = 1;
inline void ReduceReply::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ReduceReply::message() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceReply.message)
  return _internal_message();
}
inline void ReduceReply::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:masterworker.ReduceReply.message)
}
inline std::string* ReduceReply::mutable_message() {
  // @@protoc_insertion_point(field_mutable:masterworker.ReduceReply.message)
  return _internal_mutable_message();
}
inline const std::string& ReduceReply::_internal_message() const {
  return message_.Get();
}
inline void ReduceReply::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReduceReply::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.ReduceReply.message)
}
inline void ReduceReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.ReduceReply.message)
}
inline void ReduceReply::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.ReduceReply.message)
}
inline std::string* ReduceReply::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReduceReply::release_message() {
  // @@protoc_insertion_point(field_release:masterworker.ReduceReply.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReduceReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.ReduceReply.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace masterworker

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto
